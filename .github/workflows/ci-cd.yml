name: 🚀 DeliCasa CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.1'
  GO_VERSION: '1.21'

jobs:
  # ==========================================
  # Code Quality & Linting
  # ==========================================
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📂 Get PNPM Store Directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup PNPM Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📋 Install Dependencies
        run: |
          cd next-client
          pnpm install --frozen-lockfile

      - name: 🎨 Lint Next Client
        run: |
          cd next-client
          pnpm run lint

      - name: 🔤 TypeScript Check (Continue on Error)
        run: |
          cd next-client
          pnpm run type-check || echo "TypeScript errors found - continuing with build"
        continue-on-error: true

  # ==========================================
  # Next.js Client Tests
  # ==========================================
  test-next-client:
    name: 🧪 Test Next.js Client
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📂 Get PNPM Store Directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup PNPM Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📋 Install Dependencies
        run: |
          cd next-client
          pnpm install --frozen-lockfile

      - name: 🧪 Run Unit Tests
        run: |
          cd next-client
          pnpm run test:run

      - name: 🎭 Install Playwright Browsers
        run: |
          cd next-client
          npx playwright install --with-deps

      - name: 🧪 Run E2E Tests
        run: |
          cd next-client
          pnpm run test:e2e
        env:
          CI: true

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-next-client
          path: |
            next-client/playwright-report/
            next-client/test-results/
          retention-days: 30

  # ==========================================
  # Bridge Server Tests
  # ==========================================
  test-bridge-server:
    name: 🧪 Test Bridge Server
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd BridgeServer
          pnpm install --frozen-lockfile

      - name: 🔤 TypeScript Check
        run: |
          cd BridgeServer
          pnpm run type-check
        continue-on-error: true

      - name: 🧪 Run Tests
        run: |
          cd BridgeServer
          pnpm run test || echo "No tests defined"

  # ==========================================
  # Pi Orchestrator Tests
  # ==========================================
  test-pi-orchestrator:
    name: 🧪 Test Pi Orchestrator
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📂 Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 📋 Download Go Dependencies
        run: |
          cd PiOrchestrator
          go mod download

      - name: 🧪 Run Go Tests
        run: |
          cd PiOrchestrator
          go test -v ./...

      - name: 🏗️ Build Go Binary
        run: |
          cd PiOrchestrator
          make build

  # ==========================================
  # Build & Deploy Next.js Client
  # ==========================================
  deploy-next-client:
    name: 🚀 Deploy Next.js Client
    runs-on: ubuntu-latest
    needs: [test-next-client]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd next-client
          pnpm install --frozen-lockfile

      - name: 🏗️ Build Next.js Application
        run: |
          cd next-client
          pnpm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_BRIDGE_WORKER_URL: ${{ secrets.BRIDGE_SERVER_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          DELICASA_NEXTAUTH_SECRET: ${{ secrets.DELICASA_NEXTAUTH_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DELICASA_COGNITO_USER_POOL_ID: ${{ secrets.DELICASA_COGNITO_USER_POOL_ID }}
          DELICASA_COGNITO_APP_CLIENT_ID: ${{ secrets.DELICASA_COGNITO_APP_CLIENT_ID }}

      - name: 🌩️ Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: 'next-client'
          command: pages deploy out --project-name=delicasa-next-client

  # ==========================================
  # Deploy Bridge Server
  # ==========================================
  deploy-bridge-server:
    name: 🚀 Deploy Bridge Server
    runs-on: ubuntu-latest
    needs: [test-bridge-server]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd BridgeServer
          pnpm install --frozen-lockfile

      - name: 🌩️ Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: 'BridgeServer'
          command: deploy
        env:
          ENVIRONMENT: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DELICASA_COGNITO_USER_POOL_ID: ${{ secrets.DELICASA_COGNITO_USER_POOL_ID }}
          DELICASA_COGNITO_APP_CLIENT_ID: ${{ secrets.DELICASA_COGNITO_APP_CLIENT_ID }}
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # ==========================================
  # Integration Tests (Post-Deploy)
  # ==========================================
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-next-client, deploy-bridge-server]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd next-client
          pnpm install --frozen-lockfile

      - name: 🧪 Run Integration Tests
        run: |
          cd next-client
          pnpm run test:e2e:integration
        env:
          TEST_BASE_URL: ${{ secrets.PRODUCTION_URL }}
          BRIDGE_SERVER_URL: ${{ secrets.BRIDGE_SERVER_URL }}

      - name: 📊 Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            next-client/playwright-report/
            next-client/test-results/
          retention-days: 30

  # ==========================================
  # Deployment Notification
  # ==========================================
  notify-deployment:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-next-client, deploy-bridge-server, integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: ✅ Deployment Success
        if: needs.deploy-next-client.result == 'success' && needs.deploy-bridge-server.result == 'success'
        run: |
          echo "🎉 DeliCasa deployment completed successfully!"
          echo "🌐 Next Client: ${{ secrets.PRODUCTION_URL }}"
          echo "🔗 Bridge Server: ${{ secrets.BRIDGE_SERVER_URL }}"

      - name: ❌ Deployment Failure
        if: needs.deploy-next-client.result == 'failure' || needs.deploy-bridge-server.result == 'failure'
        run: |
          echo "❌ DeliCasa deployment failed!"
          echo "Check the logs for more details."
          exit 1